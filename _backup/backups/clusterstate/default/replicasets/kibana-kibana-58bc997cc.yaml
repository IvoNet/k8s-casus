apiVersion: apps/v1
kind: ReplicaSet
metadata:
  annotations:
    deployment.kubernetes.io/desired-replicas: "1"
    deployment.kubernetes.io/max-replicas: "1"
    deployment.kubernetes.io/revision: "1"
  creationTimestamp: "2022-07-01T19:18:47Z"
  generation: 1
  labels:
    app: kibana
    pod-template-hash: 58bc997cc
    release: kibana
  name: kibana-kibana-58bc997cc
  namespace: default
  ownerReferences:
  - apiVersion: apps/v1
    blockOwnerDeletion: true
    controller: true
    kind: Deployment
    name: kibana-kibana
    uid: 7c3d9568-f283-4580-9ef4-5166c6a091c1
  resourceVersion: "16075"
  uid: beed81b4-d85d-40ac-9855-ec9808153dbb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
      pod-template-hash: 58bc997cc
      release: kibana
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: kibana
        pod-template-hash: 58bc997cc
        release: kibana
    spec:
      automountServiceAccountToken: true
      containers:
      - env:
        - name: ELASTICSEARCH_HOSTS
          value: http://elasticsearch-master:9200
        - name: SERVER_HOST
          value: 0.0.0.0
        - name: NODE_OPTIONS
          value: --max-old-space-size=1800
        image: docker.elastic.co/kibana/kibana:7.17.3
        imagePullPolicy: IfNotPresent
        name: kibana
        ports:
        - containerPort: 5601
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - bash
            - -c
            - |
              #!/usr/bin/env bash -e

              # Disable nss cache to avoid filling dentry cache when calling curl
              # This is required with Kibana Docker using nss < 3.52
              export NSS_SDB_USE_CACHE=no

              http () {
                  local path="${1}"
                  set -- -XGET -s --fail -L

                  if [ -n "${ELASTICSEARCH_USERNAME}" ] && [ -n "${ELASTICSEARCH_PASSWORD}" ]; then
                    set -- "$@" -u "${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}"
                  fi

                  STATUS=$(curl --output /dev/null --write-out "%{http_code}" -k "$@" "http://localhost:5601${path}")
                  if [[ "${STATUS}" -eq 200 ]]; then
                    exit 0
                  fi

                  echo "Error: Got HTTP code ${STATUS} but expected a 200"
                  exit 1
              }

              http "/app/kibana"
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "1"
          requests:
            cpu: 100m
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 1000
      terminationGracePeriodSeconds: 30
status:
  availableReplicas: 1
  fullyLabeledReplicas: 1
  observedGeneration: 1
  readyReplicas: 1
  replicas: 1
